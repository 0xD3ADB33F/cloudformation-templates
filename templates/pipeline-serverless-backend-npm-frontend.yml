AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless deployment pipeline for a serverless backend and a npm/react frontend
Parameters:
  GithubOauthToken:
    Type: String
  GithubRepoOwner:
    Type: String
  GithubRepoName:
    Type: String
  GithubRepoBranch:
    Type: String
    Default: master
  DeploymentLambdaFunctionsBucket:
    Type: String
    Description: Bucket where to find the deployment helper functions for the pipeline.
    Default: ruempler-cloudformation-templates-lambdas-prod
  DeploymentLambdaFunctionsKey:
    Type: String
    Description: S3 Key where to find the deployment helper function zip for the pipeline.
    Default: lambda.zip
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Source Code Repository
        Parameters:
          - GithubRepoOwner
          - GithubRepoName
          - GithubRepoBranch
          - GithubOauthToken
Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - Ref: WebsiteBucket
                - "/*"
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt [PipelineRole, Arn]
      ArtifactStore:
        Location:
          Ref:
            ArtifactStoreBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GithubRepoOwner
                Repo: !Ref GithubRepoName
                Branch: !Ref GithubRepoBranch
                OAuthToken: !Ref GithubOauthToken
              RunOrder: 1
        - Name: DeployApp
          Actions:
          - Name: DeployBackend
            ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
            OutputArtifacts:
              - Name: DeployBackendOutput
            InputArtifacts:
              - Name: SourceOutput
            Configuration:
                FunctionName: !Ref DeployBackendFunction
            RunOrder: 1
          - Name: DeployFrontend
            ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
            InputArtifacts:
              - Name: SourceOutput
              - Name: DeployBackendOutput
            Configuration:
                FunctionName: !Ref DeployFrontendFunction
            RunOrder: 2
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  DeployFrontendFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref DeploymentLambdaFunctionsBucket
        S3Key: !Ref DeploymentLambdaFunctionsKey

      Handler: handler.deployFrontendAction
      Role: !GetAtt [DeployFrontendFunctionRole, Arn]
      Runtime: nodejs4.3
      MemorySize: 1024
      Timeout: 300
      Environment:
        Variables:
          WEBSITE_BUCKET: !Ref WebsiteBucket

  DeployBackendFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref DeploymentLambdaFunctionsBucket
        S3Key: !Ref DeploymentLambdaFunctionsKey

      Handler: handler.deployBackendAction
      Role: !GetAtt [DeployBackendFunctionRole, Arn]
      Runtime: nodejs4.3
      MemorySize: 1024
      Timeout: 300

  DeployFrontendFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess

  DeployBackendFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess
