AWSTemplateFormatVersion: "2010-09-09"
Description: Infrastructure for CloudFormation templates, e.g. pipeline and bucket 
Parameters:
  TemplateBucketName:
    Type: String
    Default: ruempler-cloudformation-templates
  GithubOauthToken:
    Type: String
  DeploymentStage:
    Type: String
    Default: prod

Resources:

  LambdaFunctionBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead

  TemplateBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref TemplateBucketName
      AccessControl: PublicRead

  TemplateBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref TemplateBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource: !Sub arn:aws:s3:::${TemplateBucket}/*

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn:
        Fn::GetAtt:
          - PipelineRole
          - Arn
      ArtifactStore:
        Location:
          Ref:
            ArtifactStoreBucket
        Type: S3
      Stages:
        - Name: source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: s0enke
                Repo: cloudformation-templates
                Branch: master
                OAuthToken:
                  Ref: GithubOauthToken
              RunOrder: 1        
        - Name: validate_and_deploy_templates
          Actions:
            - Name: DeployLambdas
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              OutputArtifacts: []
              Configuration:
                FunctionName:
                  Ref: DeployLambdasFunction
              RunOrder: 1
            - InputArtifacts:
                - Name: SourceOutput
              Name: ValidateAndDeployTemplates
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              OutputArtifacts: []
              Configuration:
                FunctionName:
                  Ref: ValidateAndDeployFunction
              RunOrder: 2
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  ValidateAndDeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          from boto3.session import Session
          import botocore
          import tempfile
          import zipfile
          import json

          code_pipeline = boto3.client('codepipeline')
          cf = boto3.client('cloudformation')

          def handler(event, context):

            job = event['CodePipeline.job'];
            job_data = job['data']
            job_id = job['id']
            artifact = job_data['inputArtifacts'][0];

            key_id = job_data['artifactCredentials']['accessKeyId']
            key_secret = job_data['artifactCredentials']['secretAccessKey']
            session_token = job_data['artifactCredentials']['sessionToken']

            stack_name = 'react-boilerplate-ci-infrastructure'
            file_in_zip_yaml = 'ci_build/infrastructure.yml'
            cfn_yaml_file = '/tmp/infrastructure.yml'

            # download artifact
            session = Session(aws_access_key_id=key_id,
            aws_secret_access_key=key_secret,
            aws_session_token=session_token)
            s3 = session.client('s3', config=botocore.client.Config(signature_version='s3v4'))

            tmp_file = tempfile.NamedTemporaryFile()
            bucket = artifact['location']['s3Location']['bucketName']
            key = artifact['location']['s3Location']['objectKey']

            code_pipeline.put_job_success_result(jobId=job_id)
      Handler: index.handler
      Role: !GetAtt ValidateAndDeployFunctionRole.Arn
      Timeout: 300
      Runtime: python2.7

  ValidateAndDeployFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  DeployLambdasFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var childProcess = require('child_process');
          var fs = require('fs');
          var AWS = require('aws-sdk');
          var codepipeline = new AWS.CodePipeline();
          var s3;

          process.env.HOME = '/tmp';
          exports.handler = function(event, context) {

            var job = event['CodePipeline.job'];
            s3 = new AWS.S3({
              "signatureVersion":"v4",
              "accessKeyId": job.data.artifactCredentials.accessKeyId,
              "secretAccessKey": job.data.artifactCredentials.secretAccessKey,
              "sessionToken": job.data.artifactCredentials.sessionToken
            });


            doAction(npmAction, event, context);
          }

          function doAction(actionFunction, event, context) {
            var promise;
            try {
                promise = actionFunction(event["CodePipeline.job"])
            } catch (e) {
                promise = Promise.reject(e);
            }

            promise
              .then(function() {
                var params = {
                  jobId: event["CodePipeline.job"].id
                };
                codepipeline.putJobSuccessResult(params, function(err, data) {
                  if(err) {
                    context.fail(err);
                  } else {
                    context.succeed("Action complete.");
                  }
                });
              }).catch( function(message) {
                var m = JSON.stringify(message);
                console.error("Failure: "+m);

                var params = {
                  jobId: event["CodePipeline.job"].id,
                  failureDetails: {
                    message: m,
                    type: 'JobFailed',
                    externalExecutionId: context.invokeid
                  }
                };

                codepipeline.putJobFailureResult(params, function(err, data) {
                    context.fail(m);
                });
            });
          }

          function npmAction(jobDetails) {
            var artifactName = 'SourceOutput';
            var artifactZipPath = '/tmp/source.zip';
            var artifactExtractPath = '/tmp/source/';
            return downloadInputArtifact(jobDetails, artifactName, artifactZipPath)
              .then(function () {
                return extractZip(artifactZipPath, artifactExtractPath);
              }).then(function () {
                return npmInstallAndDeployLambdaZip(artifactExtractPath + 'lambda');
              });
          }

          function downloadInputArtifact(jobDetails, artifactName, dest) {
            var artifact = null;
            jobDetails.data.inputArtifacts.forEach(function (a) {
              if (a.name == artifactName) {
                  artifact = a;
              }
            });

            if (artifact != null && artifact.location.type == 'S3') {
              var params = {
                Bucket: artifact.location.s3Location.bucketName,
                Key: artifact.location.s3Location.objectKey
              };
              return getS3Object(params, dest);
            } else {
              return Promise.reject("Unknown Source Type:" + JSON.stringify(sourceOutput));
            }
          }

          function getS3Object(params, dest) {
            return new Promise(function(resolve,reject) {
              var file = fs.createWriteStream(dest);
              s3.getObject(params)
                .createReadStream()
                .on('error', reject)
                .pipe(file)
                .on('close', resolve);
            });
          }

          function extractZip(sourceZip,destDirectory) {
            return new Promise(function (resolve, reject) {
              console.log("Extracting zip: '"+sourceZip+"' to '"+destDirectory+"'");
              try {
                childProcess.execSync('rm -fr ' + destDirectory, {encoding: 'utf-8'});
                fs.mkdirSync(destDirectory);
                process.chdir(destDirectory);
                childProcess.execSync('unzip -o ' + sourceZip, {encoding: 'utf-8'});
                resolve(true);
              } catch (e) {
                reject(e);
              }
            });
          }

          function npmInstallAndDeployLambdaZip(destDirectory) {
            return new Promise(function (resolve, reject) {
              try {
                var lambdaZipName = 'lambda.zip';
                var lambdaZipPath = '/tmp/' + lambdaZipName;

                childProcess.execSync('rm -fr /tmp/npm', {encoding: 'utf-8'});
                childProcess.execSync('npm install s3-deploy bestzip -g --prefix=/tmp/npm', {encoding: 'utf-8'});

                process.chdir(destDirectory);
                childProcess.execSync('npm install --progress=false', {encoding: 'utf-8'});

                console.log(childProcess.execSync('/tmp/npm/bin/bestzip ' + lambdaZipPath + ' .', {encoding: 'utf-8'}));

                process.chdir('/tmp');
                console.log(childProcess.execSync('/tmp/npm/bin/s3-deploy ' + lambdaZipName + ' --bucket ' + process.env.CFN_TEMPLATES_DEPLOYMENT_BUCKET, {encoding: 'utf-8'}));

                resolve(true);
              } catch (e) {
                reject(e);
              }
            });
          }
      Handler: index.handler
      Environment:
        Variables:
          CFN_TEMPLATES_DEPLOYMENT_BUCKET: !Ref LambdaFunctionBucket
      Role: !GetAtt [DeployLambdasFunctionRole, Arn]
      Runtime: nodejs4.3
      Timeout: 300
      MemorySize: 1024

  DeployLambdasFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess